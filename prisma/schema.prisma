// Event Management Platform Database Schema
// Supports complete event lifecycle, transactions, referrals, and more

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model supporting both customers and organizers
model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String
  password          String
  role              UserRole            @default(CUSTOMER)
  profileImage      String?
  referralNumber    String              @unique @default(cuid()) // Auto-generated unique referral code
  referredBy        String? // Reference to referrer's referralNumber
  points            Int                 @default(0) // User points for discounts
  isEmailVerified   Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  organizedEvents   Event[]
  transactions      Transaction[]
  reviews           Review[]
  pointTransactions PointTransaction[]
  coupons           UserCoupon[]
  
  // Self-referential relation for referrals
  referrer          User?               @relation("UserReferrals", fields: [referredBy], references: [referralNumber])
  referrals         User[]              @relation("UserReferrals")

  @@map("users")
}

// Event categories
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  events      Event[]

  @@map("categories")
}

// Main event model
model Event {
  id                String           @id @default(cuid())
  title             String
  description       String
  startDate         DateTime
  endDate           DateTime
  location          String
  price             Int              @default(0) // Price in IDR (Rupiah)
  totalSeats        Int
  availableSeats    Int
  thumbnail         String?
  isFree            Boolean          @default(false)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Foreign Keys
  organizerId       String
  categoryId        String

  // Relations
  organizer         User             @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  category          Category         @relation(fields: [categoryId], references: [id])
  ticketTypes       TicketType[]
  transactions      Transaction[]
  reviews           Review[]
  vouchers          Voucher[]

  @@map("events")
}

// Ticket types for events (Basic, VIP, etc.)
model TicketType {
  id          String              @id @default(cuid())
  name        String              // e.g., "Regular", "VIP", "Early Bird"
  price       Int                 // Price in IDR
  description String?
  available   Int                 // Available seats for this ticket type
  maxPerUser  Int                 @default(5) // Max tickets per user
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Foreign Keys
  eventId     String

  // Relations
  event       Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets     TransactionTicket[]

  @@map("ticket_types")
}

// Transaction/Purchase model
model Transaction {
  id                String              @id @default(cuid())
  userId            String
  eventId           String
  totalAmount       Float
  discountAmount    Float               @default(0)
  finalAmount       Float
  status            TransactionStatus   @default(WAITING_PAYMENT)
  paymentProof      String?
  paymentDeadline   DateTime
  confirmedAt       DateTime?
  confirmedBy       String?
  rejectionReason   String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  event             Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  transactionTickets TransactionTicket[]
  pointTransactions PointTransaction[]

  @@map("transactions")
}

// Individual tickets within a transaction
model TransactionTicket {
  id              String      @id @default(cuid())
  quantity        Int         @default(1)
  unitPrice       Int         // Price per ticket at time of purchase
  
  // Foreign Keys
  transactionId   String
  ticketTypeId    String

  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  ticketType      TicketType  @relation(fields: [ticketTypeId], references: [id])

  @@map("transaction_tickets")
}

// Vouchers created by organizers for their events
model Voucher {
  id              String        @id @default(cuid())
  code            String        @unique
  discount        Int           // Discount amount in IDR
  discountType    DiscountType  @default(FIXED) // FIXED or PERCENTAGE
  maxUses         Int           @default(1)
  currentUses     Int           @default(0)
  minPurchase     Int           @default(0) // Minimum purchase amount
  validFrom       DateTime
  validUntil      DateTime
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Foreign Keys
  eventId         String

  // Relations
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("vouchers")
}

// System-wide coupons (from referrals, promotions, etc.)
model Coupon {
  id              String        @id @default(cuid())
  code            String        @unique
  discount        Int           // Discount amount in IDR
  discountType    DiscountType  @default(FIXED)
  minPurchase     Int           @default(0)
  validFrom       DateTime
  validUntil      DateTime
  isActive        Boolean       @default(true)
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  userCoupons     UserCoupon[]

  @@map("coupons")
}

// Junction table for user-coupon assignments
model UserCoupon {
  id        String   @id @default(cuid())
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Foreign Keys
  userId    String
  couponId  String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
}

// Point transaction history
model PointTransaction {
  id              String              @id @default(cuid())
  points          Int                 // Positive for earning, negative for spending
  type            PointTransactionType
  description     String
  expiresAt       DateTime?           // Points expire after 3 months
  createdAt       DateTime            @default(now())

  // Foreign Keys
  userId          String
  transactionId   String?             @unique // For points used in transactions

  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction     Transaction?        @relation(fields: [transactionId], references: [id])

  @@map("point_transactions")
}

// Event reviews and ratings
model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  userId      String
  eventId     String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Ensure one review per user per event
  @@unique([userId, eventId])
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  ORGANIZER
  ADMIN
}

enum TransactionStatus {
  WAITING_PAYMENT      // User needs to upload payment proof
  WAITING_CONFIRMATION // Payment proof uploaded, waiting for organizer approval
  CONFIRMED            // Payment approved by organizer
  REJECTED             // Payment rejected by organizer
  EXPIRED              // Payment deadline exceeded
  CANCELED             // Canceled due to timeout or other reasons
}

enum DiscountType {
  FIXED      // Fixed amount discount
  PERCENTAGE // Percentage discount
}

enum PointTransactionType {
  EARNED_REFERRAL  // Points earned from referral
  EARNED_PURCHASE  // Points earned from transaction
  USED_PURCHASE    // Points used in purchase
  EXPIRED          // Points expired
}
