generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String
  role              UserRole           @default(CUSTOMER)
  profileImage      String?
  referralNumber    String             @unique @default(cuid())
  referredBy        String?
  points            Int                @default(0)
  isEmailVerified   Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  organizedEvents   Event[]
  pointTransactions PointTransaction[]
  reviews           Review[]
  transactions      Transaction[]
  coupons           UserCoupon[]
  referrer          User?              @relation("UserReferrals", fields: [referredBy], references: [referralNumber])
  referrals         User[]             @relation("UserReferrals")

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]

  @@map("categories")
}

model Event {
  id             String        @id @default(cuid())
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime
  location       String
  price          Int           @default(0)
  totalSeats     Int
  availableSeats Int
  thumbnail      String?
  isFree         Boolean       @default(false)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizerId    String
  categoryId     String
  category       Category      @relation(fields: [categoryId], references: [id])
  organizer      User          @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  reviews        Review[]
  ticketTypes    TicketType[]
  transactions   Transaction[]
  vouchers       Voucher[]

  @@map("events")
}

model TicketType {
  id          String              @id @default(cuid())
  name        String
  price       Int
  description String?
  available   Int
  maxPerUser  Int                 @default(5)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  eventId     String
  event       Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets     TransactionTicket[]

  @@map("ticket_types")
}

model Transaction {
  id                 String              @id @default(cuid())
  userId             String
  eventId            String
  totalAmount        Float
  discountAmount     Float               @default(0)
  finalAmount        Float
  status             TransactionStatus   @default(WAITING_PAYMENT)
  paymentProof       String?
  paymentDeadline    DateTime
  confirmedAt        DateTime?
  confirmedBy        String?
  rejectionReason    String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  pointTransactions  PointTransaction?
  transactionTickets TransactionTicket[]
  event              Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model TransactionTicket {
  id            String      @id @default(cuid())
  quantity      Int         @default(1)
  unitPrice     Int
  transactionId String
  ticketTypeId  String
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_tickets")
}

model Voucher {
  id           String       @id @default(cuid())
  code         String       @unique
  discount     Int
  discountType DiscountType @default(FIXED)
  maxUses      Int          @default(1)
  currentUses  Int          @default(0)
  minPurchase  Int          @default(0)
  validFrom    DateTime
  validUntil   DateTime
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  eventId      String
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("vouchers")
}

model Coupon {
  id           String       @id @default(cuid())
  code         String       @unique
  discount     Int
  discountType DiscountType @default(FIXED)
  minPurchase  Int          @default(0)
  validFrom    DateTime
  validUntil   DateTime
  isActive     Boolean      @default(true)
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userCoupons  UserCoupon[]

  @@map("coupons")
}

model UserCoupon {
  id        String    @id @default(cuid())
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  userId    String
  couponId  String
  coupon    Coupon    @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model PointTransaction {
  id            String               @id @default(cuid())
  points        Int
  type          PointTransactionType
  description   String
  expiresAt     DateTime?
  createdAt     DateTime             @default(now())
  userId        String
  transactionId String?              @unique
  transaction   Transaction?         @relation(fields: [transactionId], references: [id])
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_transactions")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("reviews")
}

enum UserRole {
  CUSTOMER
  ORGANIZER
  ADMIN
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  CONFIRMED
  REJECTED
  EXPIRED
  CANCELED
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

enum PointTransactionType {
  EARNED_REFERRAL
  EARNED_PURCHASE
  USED_PURCHASE
  EXPIRED
}
